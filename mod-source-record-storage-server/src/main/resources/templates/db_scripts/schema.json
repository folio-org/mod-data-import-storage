{
  "tables": [
    {
      "tableName": "snapshots",
      "fromModuleVersion": "mod-source-record-storage-1.0.0",
      "withMetadata": true,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "jobExecutionId",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "jobExecutionId",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "raw_records",
      "fromModuleVersion": "mod-source-record-storage-2.0.0",
      "withMetadata": true,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "marc_records",
      "fromModuleVersion": "mod-source-record-storage-1.0.0",
      "withMetadata": true,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "error_records",
      "fromModuleVersion": "mod-source-record-storage-1.0.0",
      "withMetadata": true,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "records",
      "fromModuleVersion": "mod-source-record-storage-1.0.0",
      "withMetadata": true,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "snapshotId",
          "targetTable": "snapshots",
          "tOps": "ADD"
        }
      ]
    }
  ],
  "scripts": [
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE VIEW records_view AS SELECT records.id, json_build_object('id', records.jsonb->>'id', 'snapshotId', records.jsonb->>'snapshotId', 'matchedProfileId', records.jsonb->>'matchedProfileId','matchedId', records.jsonb->>'matchedId','generation', records.jsonb->>'generation','recordType', records.jsonb->>'recordType', 'deleted', records.jsonb->>'deleted', 'order', records.jsonb->>'order', 'externalIdsHolder', records.jsonb->'externalIdsHolder', 'additionalInfo', records.jsonb->'additionalInfo', 'metadata', records.jsonb->'metadata', 'rawRecord', raw_records.jsonb,'parsedRecord', COALESCE(marc_records.jsonb),'errorRecord', error_records.jsonb) AS jsonb FROM records JOIN raw_records ON records.jsonb->>'rawRecordId' = raw_records.jsonb->>'id' LEFT JOIN marc_records ON records.jsonb->>'parsedRecordId' = marc_records.jsonb->>'id' LEFT JOIN error_records ON records.jsonb->>'errorRecordId' = error_records.jsonb->>'id';",
      "fromModuleVersion": "mod-source-record-storage-2.0.0"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE VIEW source_records_view AS SELECT records.id, json_build_object('recordId', records.jsonb->>'id', 'snapshotId', records.jsonb->>'snapshotId', 'recordType', records.jsonb->>'recordType', 'deleted', records.jsonb->>'deleted', 'order', records.jsonb->>'order','additionalInfo', records.jsonb->'additionalInfo', 'metadata', records.jsonb->'metadata', 'rawRecord', raw_records.jsonb, 'parsedRecord', COALESCE(marc_records.jsonb)) AS jsonb FROM records JOIN raw_records ON records.jsonb->>'rawRecordId' = raw_records.jsonb->>'id' LEFT JOIN marc_records ON records.jsonb->>'parsedRecordId' = marc_records.jsonb->>'id' WHERE records.jsonb->>'parsedRecordId' IS NOT NULL;",
      "fromModuleVersion": "mod-source-record-storage-2.0.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS records_raw_record_id_idx_btree ON records USING BTREE ((jsonb ->> 'rawRecordId'));",
      "fromModuleVersion": "mod-source-record-storage-2.3.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS records_parsed_record_id_idx_btree ON records USING BTREE ((jsonb ->> 'parsedRecordId'));",
      "fromModuleVersion": "mod-source-record-storage-2.3.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS raw_records_id_idx_btree ON raw_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "mod-source-record-storage-2.3.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS marc_records_id_idx_btree ON marc_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "mod-source-record-storage-2.3.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS error_records_id_idx_btree ON error_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "mod-source-record-storage-2.3.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS records_externalIdsHolder_instanceId_idx_btree ON records USING BTREE ((jsonb -> 'externalIdsHolder' ->> 'instanceId'));"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE FUNCTION get_highest_generation(matchedId uuid, jobSnapshotId uuid) RETURNS integer AS $generation$ DECLARE generation integer; BEGIN SELECT MAX(records.jsonb ->> 'generation') into generation FROM records INNER JOIN snapshots ON records.snapshotId = snapshots.id WHERE (records.jsonb ->> 'matchedId')::uuid = matchedId AND snapshots.jsonb ->> 'status' = 'COMMITTED' AND (snapshots.jsonb -> 'metadata' ->> 'updatedDate')::timestamp with time zone < (SELECT snapshots.jsonb ->> 'processingStartedDate' FROM snapshots WHERE (snapshots.jsonb ->> 'jobExecutionId')::uuid = jobSnapshotId)::timestamp with time zone; RETURN generation; END; $generation$ LANGUAGE plpgsql;",
      "fromModuleVersion": "mod-source-record-storage-2.1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE FUNCTION get_record_by_external_id(externalId uuid, idFieldName text) RETURNS jsonb AS $recordDtoByExternalId$ DECLARE recordDtoByExternalId jsonb; BEGIN SELECT json_build_object('id', recordsByExternalId.jsonb->>'id', 'snapshotId', recordsByExternalId.jsonb->>'snapshotId', 'matchedProfileId', recordsByExternalId.jsonb->>'matchedProfileId', 'matchedId', recordsByExternalId.jsonb->>'matchedId', 'generation', recordsByExternalId.jsonb->>'generation', 'recordType', recordsByExternalId.jsonb->>'recordType', 'deleted', recordsByExternalId.jsonb->>'deleted', 'externalIdsHolder', recordsByExternalId.jsonb->'externalIdsHolder', 'additionalInfo', recordsByExternalId.jsonb->'additionalInfo', 'metadata', recordsByExternalId.jsonb->'metadata', 'rawRecord', raw_records.jsonb, 'parsedRecord', COALESCE(marc_records.jsonb), 'errorRecord', error_records.jsonb) INTO recordDtoByExternalId FROM (SELECT * FROM records WHERE (jsonb -> 'externalIdsHolder' ->> idFieldName)::uuid = externalId AND (jsonb ->> 'generation')::int = (SELECT MAX((jsonb ->> 'generation')::int) FROM records)) AS recordsByExternalId JOIN raw_records ON recordsByExternalId.jsonb->>'rawRecordId' = raw_records.jsonb->>'id' LEFT JOIN marc_records ON recordsByExternalId.jsonb->>'parsedRecordId' = marc_records.jsonb->>'id' LEFT JOIN error_records ON recordsByExternalId.jsonb->>'errorRecordId' = error_records.jsonb->>'id'; RETURN recordDtoByExternalId; END; $recordDtoByExternalId$ LANGUAGE plpgsql;",
      "fromModuleVersion": "mod-source-record-storage-2.4.0"
    }
  ]
}
