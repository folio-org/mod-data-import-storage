{
  "tables": [
    {
      "tableName": "snapshots",
      "withMetadata": true,
      "pkColumnName": "_id",
      "generateId": false,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "jobExecutionId",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "jobExecutionId",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "raw_records",
      "withMetadata": true,
      "pkColumnName": "_id",
      "generateId": false,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "marc_records",
      "withMetadata": true,
      "pkColumnName": "_id",
      "generateId": false,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "error_records",
      "withMetadata": true,
      "pkColumnName": "_id",
      "generateId": false,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "records",
      "withMetadata": true,
      "pkColumnName": "_id",
      "generateId": false,
      "withAuditing": false,
      "uniqueIndex": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "id",
          "tOps": "ADD"
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "jobExecutionId",
          "targetTable": "snapshots",
          "tOps": "ADD"
        }
      ]
    }
  ],
  "scripts": [
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE VIEW records_view AS SELECT records._id, json_build_object('id', records.jsonb->>'id', 'snapshotId', records.jsonb->>'snapshotId', 'matchedProfileId', records.jsonb->>'matchedProfileId','matchedId', records.jsonb->>'matchedId','generation', records.jsonb->>'generation','recordType', records.jsonb->>'recordType', 'deleted', records.jsonb->>'deleted', 'additionalInfo', records.jsonb->'additionalInfo', 'metadata', records.jsonb->'metadata', 'rawRecord', raw_records.jsonb,'parsedRecord', COALESCE(marc_records.jsonb),'errorRecord', error_records.jsonb) AS jsonb FROM records JOIN raw_records ON records.jsonb->>'rawRecordId' = raw_records.jsonb->>'id' LEFT JOIN marc_records ON records.jsonb->>'parsedRecordId' = marc_records.jsonb->>'id' LEFT JOIN error_records ON records.jsonb->>'errorRecordId' = error_records.jsonb->>'id';",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE VIEW source_records_view AS SELECT records._id, json_build_object('recordId', records.jsonb->>'id', 'snapshotId', records.jsonb->>'snapshotId', 'recordType', records.jsonb->>'recordType', 'deleted', records.jsonb->>'deleted', 'additionalInfo', records.jsonb->'additionalInfo', 'metadata', records.jsonb->'metadata', 'rawRecord', raw_records.jsonb, 'parsedRecord', COALESCE(marc_records.jsonb)) AS jsonb FROM records JOIN raw_records ON records.jsonb->>'rawRecordId' = raw_records.jsonb->>'id' LEFT JOIN marc_records ON records.jsonb->>'parsedRecordId' = marc_records.jsonb->>'id' WHERE records.jsonb->>'parsedRecordId' IS NOT NULL;",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS records_raw_record_id_idx_btree ON records USING BTREE ((jsonb ->> 'rawRecordId'));",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS records_parsed_record_id_idx_btree ON records USING BTREE ((jsonb ->> 'parsedRecordId'));",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS raw_records_id_idx_btree ON raw_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS marc_records_id_idx_btree ON marc_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE INDEX IF NOT EXISTS error_records_id_idx_btree ON error_records USING BTREE ((jsonb ->> 'id'));",
      "fromModuleVersion": "1.0"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE FUNCTION get_highest_generation(matchedId uuid, snapshotId uuid) RETURNS integer AS $generation$ DECLARE generation integer; BEGIN SELECT MAX(records.jsonb ->> 'generation') into generation FROM records INNER JOIN snapshots ON records.jsonb ->> 'snapshotId' = snapshots.jsonb ->> 'jobExecutionId' WHERE (records.jsonb ->> 'matchedId')::uuid = matchedId AND snapshots.jsonb ->> 'status' = 'COMMITTED' AND (snapshots.jsonb -> 'metadata' ->> 'updatedDate')::timestamp with time zone < (SELECT snapshots.jsonb ->> 'processingStartedDate' FROM snapshots WHERE (snapshots.jsonb ->> 'jobExecutionId')::uuid = snapshotId)::timestamp with time zone; RETURN generation; END; $generation$ LANGUAGE plpgsql;",
      "fromModuleVersion": "2.0"
    },
    {
      "run": "after",
      "snippet": "CREATE OR REPLACE FUNCTION get_record_by_instance_id(instanceId uuid) RETURNS jsonb AS $recordByInstId$ DECLARE recordByInstId jsonb; BEGIN WITH rslt AS (SELECT * FROM (SELECT * FROM (SELECT * FROM records_view WHERE records_view.jsonb ->> 'recordType' = 'MARC')  AS mrc_records CROSS JOIN LATERAL json_array_elements(jsonb -> 'parsedRecord' -> 'content' -> 'fields') fields(field) WHERE field ->> '999' IS NOT null) AS records_with_additional_fields CROSS JOIN LATERAL json_array_elements(field -> '999' -> 'subfields') ids(identifier) WHERE (identifier ->> 'i')::uuid = instanceId) SELECT jsonb into recordByInstId FROM rslt WHERE (jsonb ->> 'generation')::int = (SELECT MAX((jsonb ->> 'generation')::int) FROM rslt); RETURN recordByInstId; END; $recordByInstId$ LANGUAGE plpgsql;",
      "fromModuleVersion": "2.0"
    }
  ]
}
